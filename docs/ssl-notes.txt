

Not many people realise that the unencrypted SSL handshake
(ClientHello message) reveals a lot of details about the client.

It should be possible to at least fingerprint underlying SSL
library. With a bit of luck it might be possible to match some details
about particular application (like browser).

Figuring out exact fingerprint structure is still work in progress.


Fingerprinting SSL is not a new idea, initial work was done in mid
2009 by Ivan Ristić:

 * https://www.ssllabs.com/projects/client-fingerprinting/

He was able to collect few dozen interesting signatures:

 * http://blog.ivanristic.com/2009/07/examples-of-the-information-collected-from-ssl-handshakes.html

Though, in his works he seem to have ignored the SSL extensions field,
which might be very important factor in generating reliable
fingerprints. Especially extensions ordering may have high value,
similarly to TCP options ordering for TCP/IP stack fingerprinting.


SSL handshake (ClientHello message) contains following fields:

 * Handshake version - browsers usually use version 3, Ivan Ristić
   showed that web crawlers (including wget) still use 2.

 * Requested protocol version - most likely 3.1. Less likely values
   are 3.0 and 3.2.

 * gmt_unix_time - which can be used to get current time on the client
   machine. Adding this information to knowledge gathered from the TCP
   timestamp could become a very valuable factor in detecting NATs.

 * 28 random bytes - ignored by now. Detailed analysis of PRNG might
   reveal something interesting, similarly to:
     http://lcamtuf.coredump.cx/oldtcp/tcpseq.html

 * session_id - a client may choose to resume previous SSL session.
   This field can be used to match this browser session with previous
   activities, which has an impact on user privacy, but it is probably
   too high level for p0f.

 * cipher_suites - a list of supported encryption algorithms. Both
   specific algorithms and their order seem to be application
   specific.

 * compression_methods - a list of supported compression
   methods.

 * extensions - a list of extensions. Second, after cipher_suites,
   major source of data.


Similar frame is reported by the SSL server to the client, but it
contains less information - single cipher_suite instead of a
list. Also, the response is dependent on the request which makes it
not a very good material for passive fingerprinting. On the other
hand, some fields (like gmt_unix_time) may still be valuable.


References:

 * http://tools.ietf.org/html/rfc5246
 * http://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xml


Fingerprinting extensions:

Most of the extensions don't carry any interesting data.


    170 a/000400170018
   3592 a/0006001700180019
    178 a/0032000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019

   3770 b/0100
    170 b/03000102

     11 d/00080401020101010202
      3 d/00080402040102010202
      2 d/000e0401050102010403050302030202
     89 d/00140601050104010301020106030503040303030203


